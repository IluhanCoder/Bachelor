const fs = require('fs');
const path = require('path');

// Translation dictionary (Ukrainian ‚Üí English)
const translations = {
  // Common buttons & actions
  '–í–∏–¥–∞–ª–∏—Ç–∏': 'Delete',
  '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏': 'Edit',
  '–ó–º—ñ–Ω–∏—Ç–∏': 'Change',
  '–ó–±–µ—Ä–µ–≥—Ç–∏': 'Save',
  '–°–∫–∞—Å—É–≤–∞—Ç–∏': 'Cancel',
  '–°—Ç–≤–æ—Ä–∏—Ç–∏': 'Create',
  '–î–æ–¥–∞—Ç–∏': 'Add',
  '–û–Ω–æ–≤–∏—Ç–∏': 'Update',
  '–ó–∞–∫—Ä–∏—Ç–∏': 'Close',
  '–í—ñ–¥–∫—Ä–∏—Ç–∏': 'Open',
  '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏': 'Confirm',
  
  // Task & Sprint specific
  '–î–µ—Ç–∞–ª—ñ': 'Details',
  '–ü—Ä–∏–±—Ä–∞—Ç–∏': 'Remove',
  '–î–æ —Å–ø—Ä—ñ–Ω—Ç—É': 'To Sprint',
  '–ó–∞–¥–∞—á—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ': 'No tasks available',
  '–°–ø—Ä—ñ–Ω—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ': 'No sprints available',
  '–ó–∞–≤–µ—Ä—à–µ–Ω–æ': 'Completed',
  '–í–∏–∫–æ–Ω–∞–Ω–æ': 'Completed',
  '–í –ø—Ä–æ—Ü–µ—Å—ñ': 'In Progress',
  '–ù–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ': 'Not Started',
  '–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ': 'Blocked',
  
  // Priority levels
  '–í–∏—Å–æ–∫–∞': 'High',
  '–°–µ—Ä–µ–¥–Ω—è': 'Medium',
  '–ù–∏–∑—å–∫–∞': 'Low',
  '–ö—Ä–∏—Ç–∏—á–Ω–∞': 'Critical',
  
  // Form labels
  '–ù–∞–∑–≤–∞': 'Name',
  '–û–ø–∏—Å': 'Description',
  '–°—Ç–∞—Ç—É—Å': 'Status',
  '–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç': 'Priority',
  '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å': 'Assignee',
  '–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É': 'Start Date',
  '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è': 'End Date',
  '–Ü—Å—Ç–æ—Ä—ñ—è': 'Story',
  '–ö–æ–º–µ–Ω—Ç–∞—Ä': 'Comment',
  '–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ': 'Comments',
  
  // Project management
  '–ü—Ä–æ–µ–∫—Ç': 'Project',
  '–ü—Ä–æ–µ–∫—Ç–∏': 'Projects',
  '–ë–µ–∫–ª–æ–≥': 'Backlog',
  '–ë–µ–∫–ª–æ–≥–∏': 'Backlogs',
  '–°–ø—Ä–∏–Ω—Ç': 'Sprint',
  '–°–ø—Ä–∏–Ω—Ç–∏': 'Sprints',
  '–ó–∞–¥–∞—á–∞': 'Task',
  '–ó–∞–¥–∞—á—ñ': 'Tasks',
  '–£—á–∞—Å–Ω–∏–∫': 'Participant',
  '–£—á–∞—Å–Ω–∏–∫–∏': 'Participants',
  '–í–ª–∞—Å–Ω–∏–∫': 'Owner',
  '–ó–º—ñ–Ω–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞': 'Change Owner',
  '–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç': 'Delete Project',
  '–ù–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç': 'New Project',
  '–ù–æ–≤–∏–π –±–µ–∫–ª–æ–≥': 'New Backlog',
  '–ù–æ–≤–∏–π —Å–ø—Ä–∏–Ω—Ç': 'New Sprint',
  '–ù–æ–≤–∞ –∑–∞–¥–∞—á–∞': 'New Task',
  
  // User & Profile
  '–ü—Ä–æ—Ñ—ñ–ª—å': 'Profile',
  '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å': 'Edit Profile',
  '–Ü–º\'—è': 'Name',
  '–ü—Ä—ñ–∑–≤–∏—â–µ': 'Surname',
  'Email': 'Email',
  '–ü–∞—Ä–æ–ª—å': 'Password',
  '–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å': 'New Password',
  '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å': 'Confirm Password',
  '–£–≤—ñ–π—Ç–∏': 'Sign In',
  '–í–∏–π—Ç–∏': 'Sign Out',
  '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è': 'Sign Up',
  '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è': 'Registration',
  
  // Analytics
  '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞': 'Analytics',
  '–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': 'Quick Statistics',
  '–ì—Ä–∞—Ñ—ñ–∫ —à–≤–∏–¥–∫–æ—Å—Ç—ñ': 'Velocity Chart',
  '–¢–æ–ø –∫–æ–Ω—Ç—Ä–∏–±—É—Ç–æ—Ä—ñ–≤': 'Top Contributors',
  '–í—Å—å–æ–≥–æ SP': 'Total SP',
  '–í–∏–∫–æ–Ω–∞–Ω–æ SP': 'Completed SP',
  '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è': 'No data to display',
  '–ó–∞ –ø–µ—Ä—ñ–æ–¥': 'For Period',
  '–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥': 'Select Period',
  '–í—ñ–¥': 'From',
  '–î–æ': 'To',
  
  // Month names
  '–°—ñ—á': 'Jan',
  '–õ—é—Ç': 'Feb',
  '–ë–µ—Ä': 'Mar',
  '–ö–≤—ñ': 'Apr',
  '–¢—Ä–∞': 'May',
  '–ß–µ—Ä': 'Jun',
  '–õ–∏–ø': 'Jul',
  '–°–µ—Ä': 'Aug',
  '–í–µ—Ä': 'Sep',
  '–ñ–æ–≤': 'Oct',
  '–õ–∏—Å': 'Nov',
  '–ì—Ä—É': 'Dec',
  
  // Full month names
  '–°—ñ—á–µ–Ω—å': 'January',
  '–õ—é—Ç–∏–π': 'February',
  '–ë–µ—Ä–µ–∑–µ–Ω—å': 'March',
  '–ö–≤—ñ—Ç–µ–Ω—å': 'April',
  '–¢—Ä–∞–≤–µ–Ω—å': 'May',
  '–ß–µ—Ä–≤–µ–Ω—å': 'June',
  '–õ–∏–ø–µ–Ω—å': 'July',
  '–°–µ—Ä–ø–µ–Ω—å': 'August',
  '–í–µ—Ä–µ—Å–µ–Ω—å': 'September',
  '–ñ–æ–≤—Ç–µ–Ω—å': 'October',
  '–õ–∏—Å—Ç–æ–ø–∞–¥': 'November',
  '–ì—Ä—É–¥–µ–Ω—å': 'December',
  
  // Rights & Permissions
  '–ü—Ä–∞–≤–∞': 'Rights',
  '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∞': 'Edit Rights',
  '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ': 'Edit Tasks',
  '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç': 'Edit Project',
  '–ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∑–∞–¥–∞—á—ñ': 'View Tasks',
  '–ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç': 'View Project',
  '–ö–µ—Ä—É–≤–∞—Ç–∏ —Å–ø—Ä—ñ–Ω—Ç–∞–º–∏': 'Manage Sprints',
  '–ö–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á–∞–º–∏': 'Manage Tasks',
  
  // Invites
  '–ó–∞–ø—Ä–æ—Å–∏—Ç–∏': 'Invite',
  '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è': 'Invitation',
  '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—î–∫—Ç—É': 'Project Invitation',
  '–ü—Ä–∏–π–Ω—è—Ç–∏': 'Accept',
  '–í—ñ–¥—Ö–∏–ª–∏—Ç–∏': 'Decline',
  
  // Empty states & messages
  '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ': 'No users found',
  '–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É': 'Try changing search parameters',
  '–ü—Ä–æ–µ–∫—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ': 'No projects available',
  '–ë–µ–∫–ª–æ–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ': 'No backlogs available',
  
  // Confirmation messages
  '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?': 'Are you sure?',
  '–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç?': 'Do you really want to delete this item?',
  '–î—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏': 'This action cannot be undone',
  
  // Story Points
  '–û—á–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó': 'Story Points',
  'SP': 'SP',
  'Story Points': 'Story Points',
  
  // Board statuses
  '–ë–µ–∫–ª–æ': 'Backlog',
  '–í —Ä–æ–±–æ—Ç—ñ': 'In Progress',
  '–ù–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ': 'In Review',
  '–ì–æ—Ç–æ–≤–æ': 'Done',
  
  // Time
  '–¢–∏–∂–¥–µ–Ω—å': 'Week',
  '–ú—ñ—Å—è—Ü—å': 'Month',
  '–†—ñ–∫': 'Year',
  '–°—å–æ–≥–æ–¥–Ω—ñ': 'Today',
  '–í—á–æ—Ä–∞': 'Yesterday',
  '–ó–∞–≤—Ç—Ä–∞': 'Tomorrow'
};

// Special icon button replacements
const iconButtonReplacements = {
  // Delete buttons - replace text with trash icon
  '–í–∏–¥–∞–ª–∏—Ç–∏': { icon: 'üóëÔ∏è', title: 'Delete', color: 'red' },
  // Edit buttons - replace text with pencil icon  
  '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏': { icon: '‚úèÔ∏è', title: 'Edit', color: 'gray' },
  '–ó–º—ñ–Ω–∏—Ç–∏': { icon: '‚úèÔ∏è', title: 'Edit', color: 'gray' }
};

// Function to process a single file
function translateFile(filePath) {
  console.log(`Processing: ${filePath}`);
  
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;
  
  // Track changes for reporting
  const changes = [];
  
  // Replace icon buttons first (higher priority)
  for (const [ukrText, replacement] of Object.entries(iconButtonReplacements)) {
    const buttonPattern = new RegExp(
      `(<button[^>]*>\\s*)${ukrText}(\\s*</button>)`,
      'g'
    );
    
    const newContent = content.replace(buttonPattern, (match, before, after) => {
      // Check if it's already an icon
      if (match.includes('üóëÔ∏è') || match.includes('‚úèÔ∏è')) {
        return match;
      }
      
      // Adjust button styling for icons
      let newMatch = match;
      
      // Change padding for icon buttons
      newMatch = newMatch.replace(/px-3/g, 'px-2.5');
      newMatch = newMatch.replace(/text-xs font-medium/g, 'text-base');
      
      // Add title attribute if not present
      if (!newMatch.includes('title=')) {
        newMatch = newMatch.replace('<button', `<button title="${replacement.title}"`);
      }
      
      // Replace text with icon
      newMatch = newMatch.replace(ukrText, replacement.icon);
      
      changes.push(`Icon button: "${ukrText}" ‚Üí ${replacement.icon}`);
      modified = true;
      return newMatch;
    });
    
    if (newContent !== content) {
      content = newContent;
    }
  }
  
  // Then replace regular text translations
  for (const [ukrainian, english] of Object.entries(translations)) {
    // Skip if this is an icon button text (already handled above)
    if (iconButtonReplacements[ukrainian]) continue;
    
    const regex = new RegExp(
      // Match Ukrainian text in JSX content, avoiding attributes
      `(?<=>)([^<]*?)${ukrainian.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}([^<]*?)(?=<)`,
      'g'
    );
    
    const newContent = content.replace(regex, (match) => {
      if (match.trim() === ukrainian) {
        changes.push(`"${ukrainian}" ‚Üí "${english}"`);
        modified = true;
        return match.replace(ukrainian, english);
      }
      return match;
    });
    
    if (newContent !== content) {
      content = newContent;
    }
  }
  
  // Write back if modified
  if (modified) {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úì Modified: ${changes.length} changes made`);
    changes.forEach(change => console.log(`  - ${change}`));
  } else {
    console.log(`  No changes needed`);
  }
  
  return modified;
}

// Recursively find all .tsx files
function findTsxFiles(dir) {
  const files = [];
  
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      // Skip node_modules, build, etc.
      if (!['node_modules', 'build', 'dist', '.git'].includes(item)) {
        files.push(...findTsxFiles(fullPath));
      }
    } else if (item.endsWith('.tsx') || item.endsWith('.ts')) {
      files.push(fullPath);
    }
  }
  
  return files;
}

// Main execution
const clientSrcDir = path.join(__dirname, 'client', 'src');

console.log('='.repeat(60));
console.log('üåç BACKLOGGER INTERNATIONALIZATION SCRIPT');
console.log('='.repeat(60));
console.log(`Source directory: ${clientSrcDir}\n`);

const tsxFiles = findTsxFiles(clientSrcDir);
console.log(`Found ${tsxFiles.length} TypeScript files\n`);

let modifiedCount = 0;

for (const file of tsxFiles) {
  const wasModified = translateFile(file);
  if (wasModified) {
    modifiedCount++;
  }
  console.log('');
}

console.log('='.repeat(60));
console.log(`‚úÖ TRANSLATION COMPLETE`);
console.log(`Modified ${modifiedCount} out of ${tsxFiles.length} files`);
console.log('='.repeat(60));
